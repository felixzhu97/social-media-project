name: 部署到AWS Lambda

on:
  push:
    branches: [release]
    paths:
      - 'apps/api/**'
      - 'packages/shared/**'
      - '.github/workflows/deploy-lambda.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: '**/package.json'

      - name: 安装依赖
        run: pnpm install --no-frozen-lockfile

      - name: 安装构建工具
        run: |
          pnpm add -Dw esbuild@0.20.2
          cd apps/api && pnpm add -D @types/swagger-jsdoc @types/swagger-ui-express
          cd ../../packages/shared && pnpm add -D esbuild@0.20.2
          cd ../ui && pnpm add -D esbuild@0.20.2

      - name: 构建shared包
        run: cd packages/shared && pnpm build

      - name: 检查shared包输出
        run: ls -la packages/shared/dist

      - name: 尝试构建UI包
        run: cd packages/ui && ls && pnpm build || echo "UI包构建失败，但继续执行"
        continue-on-error: true

      - name: 构建API包
        run: cd apps/api && pnpm build

      - name: 检查API包输出
        run: ls -la apps/api/dist

  deploy:
    needs: build
    # 修改：只在release分支或手动触发时部署
    # if: github.ref == 'refs/heads/release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: '**/package.json'

      - name: 安装依赖
        run: pnpm install --no-frozen-lockfile

      - name: 安装构建工具
        run: |
          pnpm add -Dw esbuild@0.20.2
          cd apps/api && pnpm add -D @types/swagger-jsdoc @types/swagger-ui-express
          cd ../../packages/shared && pnpm add -D esbuild@0.20.2
          cd ../ui && pnpm add -D esbuild@0.20.2

      - name: 构建shared包
        run: cd packages/shared && pnpm build

      - name: 检查shared包输出
        run: ls -la packages/shared/dist
        continue-on-error: true

      - name: 构建API包
        run: cd apps/api && pnpm build

      - name: 检查API包输出
        run: ls -la apps/api/dist

      - name: 创建环境变量文件
        run: |
          cd apps/api
          echo "NODE_ENV=production" > .env.prod
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env.prod
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.prod
          echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" >> .env.prod
          echo "ADMIN_SECRET=${{ secrets.ADMIN_SECRET }}" >> .env.prod
          echo "已创建部署环境变量文件："
          cat .env.prod

      - name: 添加环境变量到serverless.yml
        run: |
          cd apps/api
          echo "正在确保serverless.yml中包含所有需要的环境变量"
          grep -q "JWT_SECRET:" serverless.yml || sed -i '/environment:/a\    JWT_SECRET: ${env:JWT_SECRET}' serverless.yml
          grep -q "ADMIN_SECRET:" serverless.yml || sed -i '/environment:/a\    ADMIN_SECRET: ${env:ADMIN_SECRET}' serverless.yml
      - name: 部署到AWS Lambda
        run: cd apps/api && cp .env.prod .env && pnpm dlx serverless@3 deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
          ADMIN_SECRET: ${{ secrets.ADMIN_SECRET }}

      - name: 部署完成通知
        run: |
          echo "Lambda函数已成功部署到AWS!"
          echo "部署时间: $(date)"
